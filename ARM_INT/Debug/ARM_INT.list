
ARM_INT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  4 .ARM          00000000  080005a8  080005a8  000105b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080005a8  080005b0  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080005a8  080005a8  000105a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080005ac  080005ac  000105ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000105b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080005b0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080005b0  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004cf  00000000  00000000  000105d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000020b  00000000  00000000  00010aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00010cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00010d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000d28  00000000  00000000  00010dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000044f  00000000  00000000  00011af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003658  00000000  00000000  00011f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0001559f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000160  00000000  00000000  000155f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000590 	.word	0x08000590

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000590 	.word	0x08000590

08000170 <main>:
}*/

void	EXTI0_IRQHandler(void);

int	main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0

	
	//	System Clk init

	 	MRCC_voidSysClkInit();
 8000174:	f000 f960 	bl	8000438 <MRCC_voidSysClkInit>
	
	//	Toggle Led C13	GPIOC
	//	1- Enable Per Clk "RCC" Port C
	MRCC_voidEnablePerClk(RCC_APB2,4);
 8000178:	2104      	movs	r1, #4
 800017a:	2002      	movs	r0, #2
 800017c:	f000 f978 	bl	8000470 <MRCC_voidEnablePerClk>
	
	//Direction for C13 is output Push Pull
	M_DIO_void_setPinDir(PORTC_ID, PIN13, OUT_2MHZ_PP);
 8000180:	2202      	movs	r2, #2
 8000182:	210d      	movs	r1, #13
 8000184:	2003      	movs	r0, #3
 8000186:	f000 f809 	bl	800019c <M_DIO_void_setPinDir>
	M_DIO_void_setPinValue(PORTC_ID, PIN13, HIGH);
 800018a:	2201      	movs	r2, #1
 800018c:	210d      	movs	r1, #13
 800018e:	2003      	movs	r0, #3
 8000190:	f000 f8d8 	bl	8000344 <M_DIO_void_setPinValue>

	while(1)
	{

	}*/
	return 0;
 8000194:	2300      	movs	r3, #0
}
 8000196:	4618      	mov	r0, r3
 8000198:	bd80      	pop	{r7, pc}
	...

0800019c <M_DIO_void_setPinDir>:

#include "DIO_priv.h"
#include "DIO_int.h"

void M_DIO_void_setPinDir(u8 Port, PIN_T Pin, Dir_T DIRECTION)
{
 800019c:	b480      	push	{r7}
 800019e:	b083      	sub	sp, #12
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	4603      	mov	r3, r0
 80001a4:	71fb      	strb	r3, [r7, #7]
 80001a6:	460b      	mov	r3, r1
 80001a8:	71bb      	strb	r3, [r7, #6]
 80001aa:	4613      	mov	r3, r2
 80001ac:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
	if(Port<3 &&  Pin < 16 && DIRECTION < 16)
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b02      	cmp	r3, #2
 80001b2:	f200 80b6 	bhi.w	8000322 <M_DIO_void_setPinDir+0x186>
 80001b6:	79bb      	ldrb	r3, [r7, #6]
 80001b8:	2b0f      	cmp	r3, #15
 80001ba:	f200 80b2 	bhi.w	8000322 <M_DIO_void_setPinDir+0x186>
 80001be:	797b      	ldrb	r3, [r7, #5]
 80001c0:	2b0f      	cmp	r3, #15
 80001c2:	f200 80ae 	bhi.w	8000322 <M_DIO_void_setPinDir+0x186>
	{
		if(Pin < 8) /*	Pin0 : Pin7 ==> CRL	*/
 80001c6:	79bb      	ldrb	r3, [r7, #6]
 80001c8:	2b07      	cmp	r3, #7
 80001ca:	d852      	bhi.n	8000272 <M_DIO_void_setPinDir+0xd6>
		{
			switch(Port)
 80001cc:	79fb      	ldrb	r3, [r7, #7]
 80001ce:	2b03      	cmp	r3, #3
 80001d0:	d037      	beq.n	8000242 <M_DIO_void_setPinDir+0xa6>
 80001d2:	2b03      	cmp	r3, #3
 80001d4:	f300 80a5 	bgt.w	8000322 <M_DIO_void_setPinDir+0x186>
 80001d8:	2b01      	cmp	r3, #1
 80001da:	d002      	beq.n	80001e2 <M_DIO_void_setPinDir+0x46>
 80001dc:	2b02      	cmp	r3, #2
 80001de:	d018      	beq.n	8000212 <M_DIO_void_setPinDir+0x76>
		}
		else{/*		Report Error Out of Range			*/	}
	}
	else
	{/*		Report Error 			*/}
}
 80001e0:	e09f      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTA_ID	:	GPIOA_CRL &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 80001e2:	4b52      	ldr	r3, [pc, #328]	; (800032c <M_DIO_void_setPinDir+0x190>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	79ba      	ldrb	r2, [r7, #6]
 80001e8:	0092      	lsls	r2, r2, #2
 80001ea:	210f      	movs	r1, #15
 80001ec:	fa01 f202 	lsl.w	r2, r1, r2
 80001f0:	43d2      	mvns	r2, r2
 80001f2:	4611      	mov	r1, r2
 80001f4:	4a4d      	ldr	r2, [pc, #308]	; (800032c <M_DIO_void_setPinDir+0x190>)
 80001f6:	400b      	ands	r3, r1
 80001f8:	6013      	str	r3, [r2, #0]
								GPIOA_CRL |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 80001fa:	4b4c      	ldr	r3, [pc, #304]	; (800032c <M_DIO_void_setPinDir+0x190>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	7979      	ldrb	r1, [r7, #5]
 8000200:	79ba      	ldrb	r2, [r7, #6]
 8000202:	0092      	lsls	r2, r2, #2
 8000204:	fa01 f202 	lsl.w	r2, r1, r2
 8000208:	4611      	mov	r1, r2
 800020a:	4a48      	ldr	r2, [pc, #288]	; (800032c <M_DIO_void_setPinDir+0x190>)
 800020c:	430b      	orrs	r3, r1
 800020e:	6013      	str	r3, [r2, #0]
								break;
 8000210:	e087      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTB_ID	:	GPIOB_CRL &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 8000212:	4b47      	ldr	r3, [pc, #284]	; (8000330 <M_DIO_void_setPinDir+0x194>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	79ba      	ldrb	r2, [r7, #6]
 8000218:	0092      	lsls	r2, r2, #2
 800021a:	210f      	movs	r1, #15
 800021c:	fa01 f202 	lsl.w	r2, r1, r2
 8000220:	43d2      	mvns	r2, r2
 8000222:	4611      	mov	r1, r2
 8000224:	4a42      	ldr	r2, [pc, #264]	; (8000330 <M_DIO_void_setPinDir+0x194>)
 8000226:	400b      	ands	r3, r1
 8000228:	6013      	str	r3, [r2, #0]
								GPIOB_CRL |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 800022a:	4b41      	ldr	r3, [pc, #260]	; (8000330 <M_DIO_void_setPinDir+0x194>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	7979      	ldrb	r1, [r7, #5]
 8000230:	79ba      	ldrb	r2, [r7, #6]
 8000232:	0092      	lsls	r2, r2, #2
 8000234:	fa01 f202 	lsl.w	r2, r1, r2
 8000238:	4611      	mov	r1, r2
 800023a:	4a3d      	ldr	r2, [pc, #244]	; (8000330 <M_DIO_void_setPinDir+0x194>)
 800023c:	430b      	orrs	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
								break;
 8000240:	e06f      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTC_ID	:	GPIOC_CRL &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 8000242:	4b3c      	ldr	r3, [pc, #240]	; (8000334 <M_DIO_void_setPinDir+0x198>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	79ba      	ldrb	r2, [r7, #6]
 8000248:	0092      	lsls	r2, r2, #2
 800024a:	210f      	movs	r1, #15
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	43d2      	mvns	r2, r2
 8000252:	4611      	mov	r1, r2
 8000254:	4a37      	ldr	r2, [pc, #220]	; (8000334 <M_DIO_void_setPinDir+0x198>)
 8000256:	400b      	ands	r3, r1
 8000258:	6013      	str	r3, [r2, #0]
								GPIOC_CRL |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 800025a:	4b36      	ldr	r3, [pc, #216]	; (8000334 <M_DIO_void_setPinDir+0x198>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	7979      	ldrb	r1, [r7, #5]
 8000260:	79ba      	ldrb	r2, [r7, #6]
 8000262:	0092      	lsls	r2, r2, #2
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <M_DIO_void_setPinDir+0x198>)
 800026c:	430b      	orrs	r3, r1
 800026e:	6013      	str	r3, [r2, #0]
								break;
 8000270:	e057      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
		}else if(Port < 16) /*	Pin8 : Pin15 ==> CRH	*/
 8000272:	79fb      	ldrb	r3, [r7, #7]
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d854      	bhi.n	8000322 <M_DIO_void_setPinDir+0x186>
			Pin -= 8 ;
 8000278:	79bb      	ldrb	r3, [r7, #6]
 800027a:	3b08      	subs	r3, #8
 800027c:	71bb      	strb	r3, [r7, #6]
			switch(Port)
 800027e:	79fb      	ldrb	r3, [r7, #7]
 8000280:	2b03      	cmp	r3, #3
 8000282:	d036      	beq.n	80002f2 <M_DIO_void_setPinDir+0x156>
 8000284:	2b03      	cmp	r3, #3
 8000286:	dc4c      	bgt.n	8000322 <M_DIO_void_setPinDir+0x186>
 8000288:	2b01      	cmp	r3, #1
 800028a:	d002      	beq.n	8000292 <M_DIO_void_setPinDir+0xf6>
 800028c:	2b02      	cmp	r3, #2
 800028e:	d018      	beq.n	80002c2 <M_DIO_void_setPinDir+0x126>
}
 8000290:	e047      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTA_ID	:	GPIOA_CRH &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 8000292:	4b29      	ldr	r3, [pc, #164]	; (8000338 <M_DIO_void_setPinDir+0x19c>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	79ba      	ldrb	r2, [r7, #6]
 8000298:	0092      	lsls	r2, r2, #2
 800029a:	210f      	movs	r1, #15
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	43d2      	mvns	r2, r2
 80002a2:	4611      	mov	r1, r2
 80002a4:	4a24      	ldr	r2, [pc, #144]	; (8000338 <M_DIO_void_setPinDir+0x19c>)
 80002a6:	400b      	ands	r3, r1
 80002a8:	6013      	str	r3, [r2, #0]
								GPIOA_CRH |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 80002aa:	4b23      	ldr	r3, [pc, #140]	; (8000338 <M_DIO_void_setPinDir+0x19c>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	7979      	ldrb	r1, [r7, #5]
 80002b0:	79ba      	ldrb	r2, [r7, #6]
 80002b2:	0092      	lsls	r2, r2, #2
 80002b4:	fa01 f202 	lsl.w	r2, r1, r2
 80002b8:	4611      	mov	r1, r2
 80002ba:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <M_DIO_void_setPinDir+0x19c>)
 80002bc:	430b      	orrs	r3, r1
 80002be:	6013      	str	r3, [r2, #0]
								break;
 80002c0:	e02f      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTB_ID	:	GPIOB_CRH &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 80002c2:	4b1e      	ldr	r3, [pc, #120]	; (800033c <M_DIO_void_setPinDir+0x1a0>)
 80002c4:	681b      	ldr	r3, [r3, #0]
 80002c6:	79ba      	ldrb	r2, [r7, #6]
 80002c8:	0092      	lsls	r2, r2, #2
 80002ca:	210f      	movs	r1, #15
 80002cc:	fa01 f202 	lsl.w	r2, r1, r2
 80002d0:	43d2      	mvns	r2, r2
 80002d2:	4611      	mov	r1, r2
 80002d4:	4a19      	ldr	r2, [pc, #100]	; (800033c <M_DIO_void_setPinDir+0x1a0>)
 80002d6:	400b      	ands	r3, r1
 80002d8:	6013      	str	r3, [r2, #0]
								GPIOB_CRH |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 80002da:	4b18      	ldr	r3, [pc, #96]	; (800033c <M_DIO_void_setPinDir+0x1a0>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	7979      	ldrb	r1, [r7, #5]
 80002e0:	79ba      	ldrb	r2, [r7, #6]
 80002e2:	0092      	lsls	r2, r2, #2
 80002e4:	fa01 f202 	lsl.w	r2, r1, r2
 80002e8:	4611      	mov	r1, r2
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <M_DIO_void_setPinDir+0x1a0>)
 80002ec:	430b      	orrs	r3, r1
 80002ee:	6013      	str	r3, [r2, #0]
								break;
 80002f0:	e017      	b.n	8000322 <M_DIO_void_setPinDir+0x186>
				case PORTC_ID	:	GPIOC_CRH &=	~(0b1111<<(Pin * 4));		/*Clear the 4 bits */
 80002f2:	4b13      	ldr	r3, [pc, #76]	; (8000340 <M_DIO_void_setPinDir+0x1a4>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	79ba      	ldrb	r2, [r7, #6]
 80002f8:	0092      	lsls	r2, r2, #2
 80002fa:	210f      	movs	r1, #15
 80002fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000300:	43d2      	mvns	r2, r2
 8000302:	4611      	mov	r1, r2
 8000304:	4a0e      	ldr	r2, [pc, #56]	; (8000340 <M_DIO_void_setPinDir+0x1a4>)
 8000306:	400b      	ands	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
								GPIOC_CRH |=	((DIRECTION)<<(Pin * 4));	/*Assign the 4 bits */
 800030a:	4b0d      	ldr	r3, [pc, #52]	; (8000340 <M_DIO_void_setPinDir+0x1a4>)
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	7979      	ldrb	r1, [r7, #5]
 8000310:	79ba      	ldrb	r2, [r7, #6]
 8000312:	0092      	lsls	r2, r2, #2
 8000314:	fa01 f202 	lsl.w	r2, r1, r2
 8000318:	4611      	mov	r1, r2
 800031a:	4a09      	ldr	r2, [pc, #36]	; (8000340 <M_DIO_void_setPinDir+0x1a4>)
 800031c:	430b      	orrs	r3, r1
 800031e:	6013      	str	r3, [r2, #0]
								break;
 8000320:	bf00      	nop
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	40010800 	.word	0x40010800
 8000330:	40010c00 	.word	0x40010c00
 8000334:	40011000 	.word	0x40011000
 8000338:	40010804 	.word	0x40010804
 800033c:	40010c04 	.word	0x40010c04
 8000340:	40011004 	.word	0x40011004

08000344 <M_DIO_void_setPinValue>:
void M_DIO_void_setPinValue(u8 Port, u8 Pin, VALUE_T value)
{
 8000344:	b480      	push	{r7}
 8000346:	b083      	sub	sp, #12
 8000348:	af00      	add	r7, sp, #0
 800034a:	4603      	mov	r3, r0
 800034c:	71fb      	strb	r3, [r7, #7]
 800034e:	460b      	mov	r3, r1
 8000350:	71bb      	strb	r3, [r7, #6]
 8000352:	4613      	mov	r3, r2
 8000354:	717b      	strb	r3, [r7, #5]
	/*	Range Check						*/
		if( Port<3 &&Pin < 16)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	2b02      	cmp	r3, #2
 800035a:	d861      	bhi.n	8000420 <M_DIO_void_setPinValue+0xdc>
 800035c:	79bb      	ldrb	r3, [r7, #6]
 800035e:	2b0f      	cmp	r3, #15
 8000360:	d85e      	bhi.n	8000420 <M_DIO_void_setPinValue+0xdc>
		{
			if(value == LOW)
 8000362:	797b      	ldrb	r3, [r7, #5]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d12d      	bne.n	80003c4 <M_DIO_void_setPinValue+0x80>
			{
				switch( Port)
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b03      	cmp	r3, #3
 800036c:	d01e      	beq.n	80003ac <M_DIO_void_setPinValue+0x68>
 800036e:	2b03      	cmp	r3, #3
 8000370:	dc56      	bgt.n	8000420 <M_DIO_void_setPinValue+0xdc>
 8000372:	2b01      	cmp	r3, #1
 8000374:	d002      	beq.n	800037c <M_DIO_void_setPinValue+0x38>
 8000376:	2b02      	cmp	r3, #2
 8000378:	d00c      	beq.n	8000394 <M_DIO_void_setPinValue+0x50>
			}
			else{/*		Report Error Out of Range			*/	}
		}
		else
		{/*		Report Error 			*/}
	}
 800037a:	e051      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTA_ID	:	CLR_BIT(GPIOA_ODR ,Pin);	break;
 800037c:	4b2b      	ldr	r3, [pc, #172]	; (800042c <M_DIO_void_setPinValue+0xe8>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	79ba      	ldrb	r2, [r7, #6]
 8000382:	2101      	movs	r1, #1
 8000384:	fa01 f202 	lsl.w	r2, r1, r2
 8000388:	43d2      	mvns	r2, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <M_DIO_void_setPinValue+0xe8>)
 800038e:	400b      	ands	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	e045      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTB_ID	:	CLR_BIT(GPIOB_ODR ,Pin);	break;
 8000394:	4b26      	ldr	r3, [pc, #152]	; (8000430 <M_DIO_void_setPinValue+0xec>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	79ba      	ldrb	r2, [r7, #6]
 800039a:	2101      	movs	r1, #1
 800039c:	fa01 f202 	lsl.w	r2, r1, r2
 80003a0:	43d2      	mvns	r2, r2
 80003a2:	4611      	mov	r1, r2
 80003a4:	4a22      	ldr	r2, [pc, #136]	; (8000430 <M_DIO_void_setPinValue+0xec>)
 80003a6:	400b      	ands	r3, r1
 80003a8:	6013      	str	r3, [r2, #0]
 80003aa:	e039      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTC_ID	:	CLR_BIT(GPIOC_ODR ,Pin);	break;
 80003ac:	4b21      	ldr	r3, [pc, #132]	; (8000434 <M_DIO_void_setPinValue+0xf0>)
 80003ae:	681b      	ldr	r3, [r3, #0]
 80003b0:	79ba      	ldrb	r2, [r7, #6]
 80003b2:	2101      	movs	r1, #1
 80003b4:	fa01 f202 	lsl.w	r2, r1, r2
 80003b8:	43d2      	mvns	r2, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a1d      	ldr	r2, [pc, #116]	; (8000434 <M_DIO_void_setPinValue+0xf0>)
 80003be:	400b      	ands	r3, r1
 80003c0:	6013      	str	r3, [r2, #0]
 80003c2:	e02d      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
			}else if(value == HIGH)
 80003c4:	797b      	ldrb	r3, [r7, #5]
 80003c6:	2b01      	cmp	r3, #1
 80003c8:	d12a      	bne.n	8000420 <M_DIO_void_setPinValue+0xdc>
				switch( Port)
 80003ca:	79fb      	ldrb	r3, [r7, #7]
 80003cc:	2b03      	cmp	r3, #3
 80003ce:	d01c      	beq.n	800040a <M_DIO_void_setPinValue+0xc6>
 80003d0:	2b03      	cmp	r3, #3
 80003d2:	dc25      	bgt.n	8000420 <M_DIO_void_setPinValue+0xdc>
 80003d4:	2b01      	cmp	r3, #1
 80003d6:	d002      	beq.n	80003de <M_DIO_void_setPinValue+0x9a>
 80003d8:	2b02      	cmp	r3, #2
 80003da:	d00b      	beq.n	80003f4 <M_DIO_void_setPinValue+0xb0>
	}
 80003dc:	e020      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTA_ID	:	SET_BIT(GPIOA_ODR ,Pin);	break;
 80003de:	4b13      	ldr	r3, [pc, #76]	; (800042c <M_DIO_void_setPinValue+0xe8>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	79ba      	ldrb	r2, [r7, #6]
 80003e4:	2101      	movs	r1, #1
 80003e6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ea:	4611      	mov	r1, r2
 80003ec:	4a0f      	ldr	r2, [pc, #60]	; (800042c <M_DIO_void_setPinValue+0xe8>)
 80003ee:	430b      	orrs	r3, r1
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e015      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTB_ID	:	SET_BIT(GPIOB_ODR ,Pin);	break;
 80003f4:	4b0e      	ldr	r3, [pc, #56]	; (8000430 <M_DIO_void_setPinValue+0xec>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	79ba      	ldrb	r2, [r7, #6]
 80003fa:	2101      	movs	r1, #1
 80003fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000400:	4611      	mov	r1, r2
 8000402:	4a0b      	ldr	r2, [pc, #44]	; (8000430 <M_DIO_void_setPinValue+0xec>)
 8000404:	430b      	orrs	r3, r1
 8000406:	6013      	str	r3, [r2, #0]
 8000408:	e00a      	b.n	8000420 <M_DIO_void_setPinValue+0xdc>
					case PORTC_ID	:	SET_BIT(GPIOC_ODR ,Pin);	break;
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <M_DIO_void_setPinValue+0xf0>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	79ba      	ldrb	r2, [r7, #6]
 8000410:	2101      	movs	r1, #1
 8000412:	fa01 f202 	lsl.w	r2, r1, r2
 8000416:	4611      	mov	r1, r2
 8000418:	4a06      	ldr	r2, [pc, #24]	; (8000434 <M_DIO_void_setPinValue+0xf0>)
 800041a:	430b      	orrs	r3, r1
 800041c:	6013      	str	r3, [r2, #0]
 800041e:	bf00      	nop
	}
 8000420:	bf00      	nop
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	bc80      	pop	{r7}
 8000428:	4770      	bx	lr
 800042a:	bf00      	nop
 800042c:	4001080c 	.word	0x4001080c
 8000430:	40010c0c 	.word	0x40010c0c
 8000434:	4001100c 	.word	0x4001100c

08000438 <MRCC_voidSysClkInit>:
#include	"RCC_config.h"



void	MRCC_voidSysClkInit(void)
{
 8000438:	b480      	push	{r7}
 800043a:	af00      	add	r7, sp, #0
	#if			SYSTEM_CLK	==	RCC_HSI
				SET_BIT(RCC_CR,0);
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MRCC_voidSysClkInit+0x30>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a09      	ldr	r2, [pc, #36]	; (8000468 <MRCC_voidSysClkInit+0x30>)
 8000442:	f043 0301 	orr.w	r3, r3, #1
 8000446:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
 8000448:	4b08      	ldr	r3, [pc, #32]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a07      	ldr	r2, [pc, #28]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800044e:	f023 0301 	bic.w	r3, r3, #1
 8000452:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,1);
 8000454:	4b05      	ldr	r3, [pc, #20]	; (800046c <MRCC_voidSysClkInit+0x34>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4a04      	ldr	r2, [pc, #16]	; (800046c <MRCC_voidSysClkInit+0x34>)
 800045a:	f023 0302 	bic.w	r3, r3, #2
 800045e:	6013      	str	r3, [r2, #0]
				CLR_BIT(RCC_CFGR,0);
				SET_BIT(RCC_CFGR,1);
	#else
		#error	"Wrong choice of RCC clock type"
	#endif
}
 8000460:	bf00      	nop
 8000462:	46bd      	mov	sp, r7
 8000464:	bc80      	pop	{r7}
 8000466:	4770      	bx	lr
 8000468:	40021000 	.word	0x40021000
 800046c:	40021004 	.word	0x40021004

08000470 <MRCC_voidEnablePerClk>:
void	MRCC_voidEnablePerClk(u8 PerBus,u8 PerNum)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	/*	Range Check						*/
	if(PerNum<32)
 8000480:	79bb      	ldrb	r3, [r7, #6]
 8000482:	2b1f      	cmp	r3, #31
 8000484:	d82a      	bhi.n	80004dc <MRCC_voidEnablePerClk+0x6c>
	{
		switch(PerBus)
 8000486:	79fb      	ldrb	r3, [r7, #7]
 8000488:	2b02      	cmp	r3, #2
 800048a:	d01c      	beq.n	80004c6 <MRCC_voidEnablePerClk+0x56>
 800048c:	2b02      	cmp	r3, #2
 800048e:	dc25      	bgt.n	80004dc <MRCC_voidEnablePerClk+0x6c>
 8000490:	2b00      	cmp	r3, #0
 8000492:	d002      	beq.n	800049a <MRCC_voidEnablePerClk+0x2a>
 8000494:	2b01      	cmp	r3, #1
 8000496:	d00b      	beq.n	80004b0 <MRCC_voidEnablePerClk+0x40>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
		}
	}
	else
	{/*		Report Error 			*/}	
}
 8000498:	e020      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_AHB	:	SET_BIT(RCC_AHBENR ,PerNum);	break;
 800049a:	4b13      	ldr	r3, [pc, #76]	; (80004e8 <MRCC_voidEnablePerClk+0x78>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	79ba      	ldrb	r2, [r7, #6]
 80004a0:	2101      	movs	r1, #1
 80004a2:	fa01 f202 	lsl.w	r2, r1, r2
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a0f      	ldr	r2, [pc, #60]	; (80004e8 <MRCC_voidEnablePerClk+0x78>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	6013      	str	r3, [r2, #0]
 80004ae:	e015      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB1	:	SET_BIT(RCC_APB1ENR,PerNum);	break;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	; (80004ec <MRCC_voidEnablePerClk+0x7c>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	79ba      	ldrb	r2, [r7, #6]
 80004b6:	2101      	movs	r1, #1
 80004b8:	fa01 f202 	lsl.w	r2, r1, r2
 80004bc:	4611      	mov	r1, r2
 80004be:	4a0b      	ldr	r2, [pc, #44]	; (80004ec <MRCC_voidEnablePerClk+0x7c>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	6013      	str	r3, [r2, #0]
 80004c4:	e00a      	b.n	80004dc <MRCC_voidEnablePerClk+0x6c>
			case RCC_APB2	:	SET_BIT(RCC_APB2ENR,PerNum);	break;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <MRCC_voidEnablePerClk+0x80>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	79ba      	ldrb	r2, [r7, #6]
 80004cc:	2101      	movs	r1, #1
 80004ce:	fa01 f202 	lsl.w	r2, r1, r2
 80004d2:	4611      	mov	r1, r2
 80004d4:	4a06      	ldr	r2, [pc, #24]	; (80004f0 <MRCC_voidEnablePerClk+0x80>)
 80004d6:	430b      	orrs	r3, r1
 80004d8:	6013      	str	r3, [r2, #0]
 80004da:	bf00      	nop
}
 80004dc:	bf00      	nop
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021014 	.word	0x40021014
 80004ec:	4002101c 	.word	0x4002101c
 80004f0:	40021018 	.word	0x40021018

080004f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004fc:	480c      	ldr	r0, [pc, #48]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fe:	490d      	ldr	r1, [pc, #52]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000500:	4a0d      	ldr	r2, [pc, #52]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000504:	e002      	b.n	800050c <LoopCopyDataInit>

08000506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800050a:	3304      	adds	r3, #4

0800050c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800050c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000510:	d3f9      	bcc.n	8000506 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000512:	4a0a      	ldr	r2, [pc, #40]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000514:	4c0a      	ldr	r4, [pc, #40]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000518:	e001      	b.n	800051e <LoopFillZerobss>

0800051a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800051a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800051c:	3204      	adds	r2, #4

0800051e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000520:	d3fb      	bcc.n	800051a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000522:	f000 f811 	bl	8000548 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000526:	f7ff fe23 	bl	8000170 <main>

0800052a <LoopForever>:

LoopForever:
  b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000538:	080005b0 	.word	0x080005b0
  ldr r2, =_sbss
 800053c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000540:	2000001c 	.word	0x2000001c

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>
	...

08000548 <__libc_init_array>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	2600      	movs	r6, #0
 800054c:	4d0c      	ldr	r5, [pc, #48]	; (8000580 <__libc_init_array+0x38>)
 800054e:	4c0d      	ldr	r4, [pc, #52]	; (8000584 <__libc_init_array+0x3c>)
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	42a6      	cmp	r6, r4
 8000556:	d109      	bne.n	800056c <__libc_init_array+0x24>
 8000558:	f000 f81a 	bl	8000590 <_init>
 800055c:	2600      	movs	r6, #0
 800055e:	4d0a      	ldr	r5, [pc, #40]	; (8000588 <__libc_init_array+0x40>)
 8000560:	4c0a      	ldr	r4, [pc, #40]	; (800058c <__libc_init_array+0x44>)
 8000562:	1b64      	subs	r4, r4, r5
 8000564:	10a4      	asrs	r4, r4, #2
 8000566:	42a6      	cmp	r6, r4
 8000568:	d105      	bne.n	8000576 <__libc_init_array+0x2e>
 800056a:	bd70      	pop	{r4, r5, r6, pc}
 800056c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000570:	4798      	blx	r3
 8000572:	3601      	adds	r6, #1
 8000574:	e7ee      	b.n	8000554 <__libc_init_array+0xc>
 8000576:	f855 3b04 	ldr.w	r3, [r5], #4
 800057a:	4798      	blx	r3
 800057c:	3601      	adds	r6, #1
 800057e:	e7f2      	b.n	8000566 <__libc_init_array+0x1e>
 8000580:	080005a8 	.word	0x080005a8
 8000584:	080005a8 	.word	0x080005a8
 8000588:	080005a8 	.word	0x080005a8
 800058c:	080005ac 	.word	0x080005ac

08000590 <_init>:
 8000590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000592:	bf00      	nop
 8000594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000596:	bc08      	pop	{r3}
 8000598:	469e      	mov	lr, r3
 800059a:	4770      	bx	lr

0800059c <_fini>:
 800059c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800059e:	bf00      	nop
 80005a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005a2:	bc08      	pop	{r3}
 80005a4:	469e      	mov	lr, r3
 80005a6:	4770      	bx	lr
